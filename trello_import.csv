"List Name","Card Name","Description","Labels"
"Epics / Sprints","Epic: Configuração Inicial do Projeto","Este épico abrange todas as tarefas relacionadas à configuração inicial dos ambientes de desenvolvimento para backend, frontend e mobile, bem como a estrutura inicial do banco de dados e documentação.","Infra/DevOps,Documentation"
"Epics / Sprints","Epic: Autenticação e Gestão de Usuários (JWT)","Este épico foca na implementação completa do sistema de autenticação e autorização, incluindo registro de diferentes tipos de usuário, login com JWT e controle de acesso baseado em papéis (RBAC).","Auth,Backend (Django),Frontend (React),Mobile (React Native)"
"Epics / Sprints","Epic: Funcionalidades para Clientes (Marketplace)","Engloba o desenvolvimento de todas as funcionalidades voltadas para o cliente final, como busca de produtos, comparação de preços, criação de listas de compras e recebimento de sugestões otimizadas.","Feature,Backend (Django),Frontend (React),Mobile (React Native)"
"Epics / Sprints","Epic: Funcionalidades para Vendedores (Marketplace)","Desenvolvimento das ferramentas para os vendedores, incluindo o gerenciamento de seus produtos e lojas, e um dashboard para acompanhar vendas e avaliações.","Feature,Backend (Django),Frontend (React)"
"Epics / Sprints","Epic: Módulo SaaS - Monitoramento de Concorrência","Criação do módulo de Software as a Service para vendedores, permitindo o monitoramento automático de preços de concorrentes, com dashboards para análise de dados.","SaaS (Scraper),Feature,Backend (Django),Frontend (React)"
"Epics / Sprints","Epic: Sugestões Inteligentes (IA)","Implementação de funcionalidades baseadas em IA, como a sugestão de estabelecimentos próximos (mesmo não cadastrados) utilizando geolocalização e análise de dados.","AI/ML,Feature,Backend (Django)"
"Epics / Sprints","Epic: Infraestrutura, Testes e Deploy","Todas as tarefas relacionadas à qualidade do código, automação e publicação do projeto, incluindo testes unitários/integração, CI/CD e configuração do ambiente de produção.","Infra/DevOps,Backend (Django),Frontend (React)"
"Epics / Sprints","Epic: Hub de Projetos (cdekteck.com.br)","Tarefas relacionadas à atualização da página hub estática para incluir o acesso ao projeto Caça-Preço.","Frontend (React),UI/UX"
"Backlog (To Do)","[Setup] Configurar ambiente de desenvolvimento do Backend (Django)","Criar virtualenv, instalar dependências do requirements.txt, configurar settings.py para desenvolvimento local.","Infra/DevOps,Backend (Django)"
"Backlog (To Do)","[Setup] Configurar ambiente de desenvolvimento do Frontend (React)","Executar 'npm install' para instalar as dependências do package.json, configurar variáveis de ambiente (.env).","Infra/DevOps,Frontend (React)"
"Backlog (To Do)","[Setup] Configurar ambiente de desenvolvimento do Mobile (React Native)","Executar 'npm install' no diretório mobile, configurar Expo e as dependências nativas necessárias.","Infra/DevOps,Mobile (React Native)"
"Backlog (To Do)","[Setup] Definir e configurar o esquema do banco de dados inicial","Revisar os modelos em models.py e executar as migrações iniciais do Django (makemigrations, migrate).","Database,Backend (Django)"
"Backlog (To Do)","[Setup] Criar documentação inicial do projeto e da API","Elaborar o README detalhado para cada módulo e iniciar a documentação da API em /docs.","Documentation"
"Backlog (To Do)","[Auth] Implementar registro de usuário (Cliente, Vendedor, Admin)","Criar o endpoint na API do Django para registrar novos usuários com diferentes papéis.","Auth,Backend (Django)"
"Backlog (To Do)","[Auth] Implementar login com JWT (geração de token)","Criar o endpoint que recebe credenciais e retorna um JSON Web Token (JWT) para autenticação.","Auth,Backend (Django)"
"Backlog (To Do)","[Auth] Implementar endpoints protegidos por RBAC","Aplicar permissões (permissions.py) nas views da API para garantir que apenas usuários autorizados (Cliente, Vendedor, Admin) possam acessar determinados recursos.","Auth,Backend (Django)"
"Backlog (To Do)","[Auth] Criar página e formulário de Registro no Frontend","Desenvolver o componente React com o formulário de registro e a lógica para chamar a API.","Auth,Frontend (React),UI/UX"
"Backlog (To Do)","[Auth] Criar página e formulário de Login no Frontend","Desenvolver o componente React com o formulário de login, chamada à API e armazenamento local do token JWT.","Auth,Frontend (React),UI/UX"
"Backlog (To Do)","[Auth] Gerenciar estado de autenticação do usuário no Frontend","Utilizar Context API (ou outra ferramenta de gerência de estado) para compartilhar o status de login e dados do usuário por toda a aplicação React.","Auth,Frontend (React)"
"Backlog (To Do)","[Auth] Criar tela e formulário de Registro no Mobile","Desenvolver a tela em React Native com o formulário de registro e a lógica para chamar a API.","Auth,Mobile (React Native),UI/UX"
"Backlog (To Do)","[Auth] Criar tela e formulário de Login no Mobile","Desenvolver a tela em React Native com o formulário de login, chamada à API e armazenamento seguro do token JWT.","Auth,Mobile (React Native),UI/UX"
"Backlog (To Do)","[Auth] Gerenciar estado de autenticação do usuário no Mobile","Utilizar Context API para compartilhar o status de login e dados do usuário por toda a aplicação React Native.","Auth,Mobile (React Native)"
"Backlog (To Do)","[Cliente] API para Clientes criarem e gerenciarem listas de compras","Desenvolver endpoints CRUD para que os clientes possam criar, visualizar, atualizar e deletar suas listas de produtos.","Feature,Backend (Django)"
"Backlog (To Do)","[Cliente] API para buscar produtos e comparar preços","Implementar o endpoint de busca principal que retorna produtos e ofertas de diferentes lojas.","Feature,Backend (Django)"
"Backlog (To Do)","[Cliente] Lógica para sugestão de melhor combinação de lojas","No backend, desenvolver o algoritmo que, a partir de uma lista de compras, sugere a combinação de lojas que resulta no menor custo total.","Feature,Backend (Django),AI/ML"
"Backlog (To Do)","[Cliente] Página para visualização e busca de produtos no Frontend","Criar a interface no React para que os usuários possam buscar produtos e ver os resultados.","Feature,Frontend (React),UI/UX"
"Backlog (To Do)","[Cliente] Componente para criar e editar listas de compras no Frontend","Desenvolver a interface que permite ao usuário montar e salvar suas listas de compras.","Feature,Frontend (React),UI/UX"
"Backlog (To Do)","[Cliente] UI para exibir resultados da comparação de preços e sugestões no Frontend","Interface para mostrar de forma clara a comparação de preços e a sugestão otimizada de compra.","Feature,Frontend (React),UI/UX"
"Backlog (To Do)","[Cliente] Tela para visualização e busca de produtos no Mobile","Criar a tela no React Native para busca de produtos.","Feature,Mobile (React Native),UI/UX"
"Backlog (To Do)","[Cliente] Funcionalidade para criar e editar listas de compras no Mobile","Desenvolver a funcionalidade nativa para o usuário gerenciar suas listas de compras.","Feature,Mobile (React Native),UI/UX"
"Backlog (To Do)","[Vendedor] API para Vendedores gerenciarem Lojas (CRUD)","Desenvolver endpoints para que vendedores possam criar, ler, atualizar e deletar informações de suas lojas.","Feature,Backend (Django)"
"Backlog (To Do)","[Vendedor] API para Vendedores gerenciarem Produtos (CRUD)","Desenvolver endpoints para que vendedores possam gerenciar o catálogo de produtos de suas lojas.","Feature,Backend (Django)"
"Backlog (To Do)","[Vendedor] API para Vendedores visualizarem dashboard de vendas","Criar endpoints que agreguem dados de vendas e performance para serem exibidos no dashboard do vendedor.","Feature,Backend (Django)"
"Backlog (To Do)","[Vendedor] Página de Dashboard do Vendedor no Frontend","Desenvolver a página principal do vendedor no React, com gráficos e indicadores de performance.","Feature,Frontend (React),UI/UX"
"Backlog (To Do)","[Vendedor] Formulários para CRUD de Lojas e Produtos no Frontend","Criar as interfaces no React para que os vendedores gerenciem suas lojas e produtos.","Feature,Frontend (React),UI/UX"
"Backlog (To Do)","[SaaS] Desenvolver scraper para coletar preços e estoque","Utilizando Scrapy e/ou Selenium, criar os robôs de web scraping para extrair dados de sites de concorrentes. O diretório 'cacapreco_scraper' já existe.","SaaS (Scraper),Backend (Django)"
"Backlog (To Do)","[SaaS] Agendar execução periódica dos scrapers","Configurar uma ferramenta como Celery com Celery Beat (ou cron jobs) para executar os scrapers em intervalos definidos.","SaaS (Scraper),Backend (Django),Infra/DevOps"
"Backlog (To Do)","[SaaS] API para Vendedores registrarem URLs de produtos concorrentes","Endpoint para que os vendedores possam submeter os links dos produtos que desejam monitorar.","SaaS (Scraper),Backend (Django)"
"Backlog (To Do)","[SaaS] Armazenar histórico de preços coletados no banco de dados","Modelar e implementar as tabelas no banco de dados para armazenar os dados coletados ao longo do tempo, permitindo a análise histórica.","SaaS (Scraper),Database,Backend (Django)"
"Backlog (To Do)","[SaaS] API para fornecer dados para os dashboards de análise","Criar os endpoints que servirão os dados históricos e atuais de preços para os dashboards do frontend.","SaaS (Scraper),Backend (Django)"
"Backlog (To Do)","[SaaS] UI para Vendedor registrar e gerenciar URLs monitoradas","Interface no React para que o vendedor possa adicionar, visualizar e remover os links de produtos que está monitorando.","SaaS (Scraper),Frontend (React),UI/UX"
"Backlog (To Do)","[SaaS] Dashboard interativo para visualização de dados de concorrentes","Desenvolver os componentes de visualização de dados (gráficos de histórico de preço, alertas de mudança) no frontend.","SaaS (Scraper),Frontend (React),UI/UX"
"Backlog (To Do)","[IA] Integrar com API de geolocalização (Google Maps)","No backend, usar uma API de geolocalização para encontrar estabelecimentos com base na localização do usuário.","AI/ML,Backend (Django)"
"Backlog (To Do)","[IA] Desenvolver modelo/lógica para sugerir estabelecimentos não cadastrados","Criar a lógica que, com base em dados externos (Google Maps, etc.), sugere lojas relevantes que ainda não estão na plataforma.","AI/ML,Backend (Django)"
"Backlog (To Do)","[Testes] Escrever testes unitários para o Backend","Criar testes para os Models, Serializers e lógica de negócio isolada no Django.","Infra/DevOps,Backend (Django)"
"Backlog (To Do)","[Testes] Escrever testes de integração para a API","Criar testes que verifiquem o funcionamento completo dos endpoints da API, da requisição à resposta.","Infra/DevOps,Backend (Django)"
"Backlog (To Do)","[DevOps] Configurar linter e formatter para o código","Integrar ferramentas como Black, Flake8 (Python) e Prettier, ESLint (JS/React) para garantir a consistência do código.","Infra/DevOps"
"Backlog (To Do)","[DevOps] Configurar pipeline de Integração Contínua (CI)","Criar um workflow no GitHub Actions (ou outra ferramenta) para rodar testes e linters automaticamente a cada push/pull request.","Infra/DevOps"
"Backlog (To Do)","[DevOps] Configurar pipeline de Deploy Contínuo (CD)","Automatizar o processo de deploy para o ambiente de produção após a passagem dos testes em uma branch específica.","Infra/DevOps"
"Backlog (To Do)","[Hub] Atualizar a página estática 'public/index.html'","Adicionar um novo card ou seção na página principal que direcione os usuários para o projeto Caça-Preço.","Frontend (React)"
